package com.justmediagroup.appweb.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.ResponseBody;

import com.blueconic.browscap.Capabilities;
import com.blueconic.browscap.UserAgentParser;
import com.justmediagroup.appweb.constans.AppWebConstans;
import com.justmediagroup.appweb.dto.GenericStringParam;
import com.justmediagroup.appweb.model.Login;
import com.justmediagroup.appweb.service.contract.IRestClientSvc;
import com.justmediagroup.modelo_canonico.TransaccionesType;
import com.justmediagroup.modelo_canonico.UsuarioType;
import com.justmediagroup.ms.auditoriausuario.constans.AuditoriaUsuarioConstans;

@Controller

public class AppWebController {

	private static final Logger LOG = LoggerFactory.getLogger(AppWebController.class);

	@Autowired
	private UserAgentParser userAgentParser;

	@Autowired
	private IRestClientSvc clienteServicioRest;

	UsuarioType user;

	String url = "";

	@GetMapping("/")
	public String index(Model modelo) {
		LOG.info("INICIANDO RAIZ");
		modelo.addAttribute("Login", new Login());
		return "notfount";
	}

	@PostMapping(value = "/login")
	@ResponseBody
	public String login(@ModelAttribute Login cliente, @RequestHeader("User-Agent") String userAgent) {
		LOG.info(" " + cliente.getCorreo());
		LOG.info(" " + cliente.getContrasenia());

		// VARIABLE PRIMITIVA QUE VAMOS A UTILIZAR A LO LARGO DE LA IMPLEMENTACION
		GenericStringParam stringParam = new GenericStringParam();
		Capabilities capabilities = userAgentParser.parse(userAgent);
		// VALORES A SER UTILIZADOS EN LA AUDITORIA
		stringParam.addValue(AppWebConstans.CORREO, cliente.getCorreo())
				.addValue(AppWebConstans.PASSWORD, cliente.getContrasenia())
				.addValue(AppWebConstans.SISTEMA, capabilities.getDeviceType() + capabilities.getPlatform())
				.addValue(AppWebConstans.VERSION_OS, capabilities.getPlatformVersion())
				.addValue(AppWebConstans.VERSION_NAVEGADOR,
						capabilities.getBrowser() + capabilities.getBrowserMajorVersion())
				.addValue(AppWebConstans.CANAL, "WEB");

		UsuarioType usuario;
		usuario = clienteServicioRest.logearUsuarioService(stringParam);
		user = usuario;

		if (usuario != null) {

		}

		return String.format("OK");
	}

	@GetMapping("/pedidos")
	public String string(Model modelo, @ModelAttribute Login cliente, @RequestHeader("User-Agent") String userAgent) {
		LOG.info("PEDIDOS");
		url = "/pedidos";
		
		// VARIABLE PRIMITIVA QUE VAMOS A UTILIZAR A LO LARGO DE LA IMPLEMENTACION
		GenericStringParam stringParam = new GenericStringParam();
		Capabilities capabilities = userAgentParser.parse(userAgent);


		// VALORES A SER UTILIZADOS EN LA AUDITORIA
		stringParam.addValue(AppWebConstans.ENLACE, url)
				.addValue(AppWebConstans.USUARIO_ID, user.getId())
				.addValue(AppWebConstans.SISTEMA, capabilities.getDeviceType() + capabilities.getPlatform())
				.addValue(AppWebConstans.VERSION_OS,capabilities.getPlatformVersion())
				.addValue(AppWebConstans.VERSION_NAVEGADOR, capabilities.getBrowser() + capabilities.getBrowserMajorVersion()
				.addValue(AppWebConstans.CANAL, canal).addValue(AuditoriaUsuarioConstans.CORREO, "N/A")
				.addValue(AppWebConstans.PASSWORD, "N/A");
			


		TransaccionesType transaccion;
		transaccion = clienteServicioRest.consultarTransaccion(stringParam);

		if (transaccion.isPuedeAcceder()) {
			return "pedidos";
		}
		return "notfount";
	}

}
